create table applestore_description_combined AS

select * from appleStore_description1

UNION ALL

select * from appleStore_description2

UNION all

select * from appleStore_description3

union ALL

select * from appleStore_description4


**EXPLORATORY DATA ANALYSIS**

--check the number of unique apps i both tables

select count(DISTINCT id) as UniqueAppIDs
from AppleStore

select count(DISTINCT id) as UniqueAppIDs
from applestore_description_combined

--check for any missing values in key fields

select count(*) as MissingValues
from AppleStore
where track_name is null or user_rating is null or prime_genre is null

select count(*) as MissingValues
from applestore_description_combined
where app_desc is null

--find out the number of apps per genre

select prime_genre, count(*) as NumApps
from AppleStore
group by prime_genre
order by NumApps DESC

--get an overview of the apps' ratings

select min(user_rating) as MinRating,
	   max(user_rating) as MaxRating,
       avg(user_rating) as AvgRating
from AppleStore

**DATA ANALYSIS**

--determine whether paid apps have a higher rating than free apps

SELECT CASE
			when price > 0 then 'Paid'
            else 'Free'
       end as App_Type,
       avg(user_rating) as Avg_Rating
from AppleStore
GROUP by App_Type

--check if apps with more supported languages have a higher rating

select CASE
			when lang_num <10 then '<10 languages'
            when lang_num between 10 and 30 then '10-30 languages'
            else '>10 languages'
       end as language_bucket,
       avg(user_rating) as Avg_Rating
from AppleStore
group by language_bucket
order by Avg_Rating DESC

--check gengres with low ratings

select prime_genre,
	   avg(user_rating) as Avg_Rating
from AppleStore
group by prime_genre
order by Avg_Rating ASC
limit 10

--check if there is corrolation between the length of the app description and the user ratingAppleStore

select CASE
			when length(b.app_desc) <500 then 'Short'
            when length(b.app_desc) BETWEEN 500 and 1000 then 'Medium'
            else 'Long'
       end as desciption_length_bucket,
       avg(a.user_rating) as average_rating
FROM
	AppleStore as A
JOIN
	applestore_description_combined as b
ON
	a.id = b.id
    
group by desciption_length_bucket
order by average_rating DESC

--check the top-rated apps for each genreAppleStore

SELECT
	prime_genre,
    track_name,
    user_rating
from (
  	  SELECT
	  prime_genre,
      track_name,
      user_rating,
  	  RANK () OVER(PARTITION BY prime_genre ORDER BY user_rating DESC, RATING_COUNT_TOT DESC) AS rank
  	  FROM
  	  AppleStore
  )   as a
WHERE
a.rank = 1
